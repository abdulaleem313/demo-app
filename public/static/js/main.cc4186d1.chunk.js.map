{"version":3,"sources":["login.js","App.js","serviceWorker.js","index.js"],"names":["OutlinedTextFields","state","openSnackBar","snackBarMessage","handleChange","event","_event$target","target","name","value","_this","setState","Object","defineProperty","loginFunction","axios","post","then","response","console","log","data","success","this","catch","error","handleClose","e","classes","props","react_default","a","createElement","className","container","noValidate","autoComplete","TextField_default","id","label","textField","type","margin","variant","onChange","Button_default","color","button","onClick","Snackbar_default","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","ContentProps","aria-describedby","message","action","key","size","IconButton_default","aria-label","close","React","Component","withStyles","theme","display","flexWrap","flexDirection","alignItems","marginLeft","spacing","unit","marginRight","dense","marginTop","menu","width","App","login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc4186d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport axios from 'axios';\r\nimport Button from '@material-ui/core/Button';\r\n \r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton'; \r\n\r\nconst styles = theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    margin: '100px'\r\n\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing.unit,\r\n    marginRight: theme.spacing.unit,\r\n  },\r\n  dense: {\r\n    marginTop: 16,\r\n  },\r\n  menu: {\r\n    width: 200,\r\n  },\r\n});\r\n \r\nclass OutlinedTextFields extends React.Component {\r\n  state = { \r\n    openSnackBar: false,\r\n    snackBarMessage: '',\r\n  };\r\n\r\n  handleChange =  event => {\r\n    const { target: { name, value } } = event; \r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n  loginFunction = (event) =>  { \r\n    // this.setState({ openSnackBar: false })\r\n    axios.post('api/login', this.state)\r\n      .then(function (response) {\r\n        console.log(response);\r\n        if(response.data.success) {\r\n\r\n            this.setState({\r\n                openSnackBar: true,\r\n                snackBarMessage: 'You are logged in'\r\n            })\r\n        } else {\r\n                    \r\n            this.setState({\r\n                openSnackBar: true,\r\n                snackBarMessage: 'User does not exists'\r\n            })\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n  handleClose= (e) => {\r\n    this.setState({\r\n        openSnackBar: false\r\n    })\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <form className={classes.container} noValidate autoComplete=\"off\">\r\n        <TextField\r\n          id=\"outlined-email-input\"\r\n          label=\"Email\"\r\n          className={classes.textField}\r\n          type=\"email\"\r\n          name=\"email\"\r\n          autoComplete=\"email\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          value={this.state.value} onChange={this.handleChange}\r\n        />\r\n\r\n        <TextField\r\n          id=\"outlined-password-input\"\r\n          label=\"Password\"\r\n          className={classes.textField}\r\n          type=\"password\"\r\n          name=\"password\"\r\n          autoComplete=\"current-password\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          value={this.state.value} onChange={this.handleChange}\r\n        />\r\n        <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={this.loginFunction}>\r\n          Login\r\n        </Button>\r\n  \r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'left',\r\n          }}\r\n          open={this.state.openSnackBar}\r\n          autoHideDuration={6000}\r\n          onClose={this.handleClose}\r\n          ContentProps={{\r\n            'aria-describedby': 'message-id',\r\n          }}\r\n          message={<span id=\"message-id\">{this.state.snackBarMessage}</span>}\r\n          action={[\r\n            <Button key=\"undo\" color=\"secondary\" size=\"small\" onClick={this.handleClose}>\r\n              CLOSE\r\n            </Button>,\r\n            <IconButton\r\n              key=\"close\"\r\n              aria-label=\"Close\"\r\n              color=\"inherit\"\r\n              className={classes.close}\r\n              onClick={this.handleClose}\r\n            > \r\n            </IconButton>,\r\n          ]}\r\n        /> \r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nOutlinedTextFields.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(OutlinedTextFields);\r\n","import React, { Component } from 'react';\n// import logo from './logo.svg'; \nimport Login from './login'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header >\n          <Login></Login>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}