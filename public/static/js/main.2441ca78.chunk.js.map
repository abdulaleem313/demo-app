{"version":3,"sources":["login.js","App.js","serviceWorker.js","index.js"],"names":["OutlinedTextFields","state","handleChange","event","_event$target","target","name","value","_this","setState","Object","defineProperty","loginFunction","console","log","axios","post","then","response","catch","error","classes","this","props","react_default","a","createElement","className","container","noValidate","autoComplete","TextField_default","id","label","textField","type","margin","variant","onChange","Button_default","color","button","onClick","React","Component","withStyles","theme","display","flexWrap","flexDirection","alignItems","marginLeft","spacing","unit","marginRight","dense","marginTop","menu","width","App","login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gQA+BMA,6MACJC,MAAQ,KAGRC,aAAgB,SAAAC,GAAS,IAAAC,EACaD,EAA5BE,OAAUC,EADKF,EACLE,KADKF,EACCG,MACxBC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACGJ,EAAOH,EAAME,OAAOE,WAGzBK,cAAgB,SAACT,GACbU,QAAQC,IAAI,aAAcN,EAAKP,OACjCc,IAAMC,KAAK,YAAaR,EAAKP,OAC1BgB,KAAK,SAAUC,GACdL,QAAQC,IAAII,KAEbC,MAAM,SAAUC,GACfP,QAAQC,IAAIM,8EAGT,IACCC,EAAYC,KAAKC,MAAjBF,QAER,OACEG,EAAAC,EAAAC,cAAA,QAAMC,UAAWN,EAAQO,UAAWC,YAAU,EAACC,aAAa,OAC1DN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,GAAG,uBACHC,MAAM,QACNN,UAAWN,EAAQa,UACnBC,KAAK,QACL7B,KAAK,QACLwB,aAAa,QACbM,OAAO,SACPC,QAAQ,WACR9B,MAAOe,KAAKrB,MAAMM,MAAO+B,SAAUhB,KAAKpB,eAG1CsB,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,GAAG,0BACHC,MAAM,WACNN,UAAWN,EAAQa,UACnBC,KAAK,WACL7B,KAAK,WACLwB,aAAa,mBACbM,OAAO,SACPC,QAAQ,WACR9B,MAAOe,KAAKrB,MAAMM,MAAO+B,SAAUhB,KAAKpB,eAE1CsB,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAQY,QAAQ,YAAYG,MAAM,UAAUb,UAAWN,EAAQoB,OAAQC,QAASpB,KAAKV,eAArF,iBAhDyB+B,IAAMC,WA8DxBC,uBAnFA,SAAAC,GAAK,MAAK,CACvBlB,UAAW,CACTmB,QAAS,OACTC,SAAU,OACVC,cAAe,SACfC,WAAY,SACZd,OAAQ,SAGVF,UAAW,CACTiB,WAAYL,EAAMM,QAAQC,KAC1BC,YAAaR,EAAMM,QAAQC,MAE7BE,MAAO,CACLC,UAAW,IAEbC,KAAM,CACJC,MAAO,OAkEIb,CAAmB7C,GC7EnB2D,mLAVX,OACEnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACkC,EAAD,eALQhB,aCQEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,KAAK,SAAAyD,GACjCA,EAAaC","file":"static/js/main.2441ca78.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport axios from 'axios';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst styles = theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    margin: '100px'\r\n\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing.unit,\r\n    marginRight: theme.spacing.unit,\r\n  },\r\n  dense: {\r\n    marginTop: 16,\r\n  },\r\n  menu: {\r\n    width: 200,\r\n  },\r\n});\r\n \r\nclass OutlinedTextFields extends React.Component {\r\n  state = { \r\n  };\r\n\r\n  handleChange =  event => {\r\n    const { target: { name, value } } = event; \r\n    this.setState({\r\n      [name]: event.target.value,\r\n    });\r\n  };\r\n  loginFunction = (event) =>  {\r\n      console.log('iun logoin', this.state)\r\n    axios.post('api/login', this.state)\r\n      .then(function (response) {\r\n        console.log(response);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <form className={classes.container} noValidate autoComplete=\"off\">\r\n        <TextField\r\n          id=\"outlined-email-input\"\r\n          label=\"Email\"\r\n          className={classes.textField}\r\n          type=\"email\"\r\n          name=\"email\"\r\n          autoComplete=\"email\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          value={this.state.value} onChange={this.handleChange}\r\n        />\r\n\r\n        <TextField\r\n          id=\"outlined-password-input\"\r\n          label=\"Password\"\r\n          className={classes.textField}\r\n          type=\"password\"\r\n          name=\"password\"\r\n          autoComplete=\"current-password\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          value={this.state.value} onChange={this.handleChange}\r\n        />\r\n        <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={this.loginFunction}>\r\n          Login\r\n        </Button>\r\n \r\n \r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nOutlinedTextFields.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(OutlinedTextFields);\r\n","import React, { Component } from 'react';\n// import logo from './logo.svg'; \nimport Login from './login'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header >\n          <Login></Login>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}